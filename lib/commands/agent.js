import chalk from 'chalk';
import ora from 'ora';
import path from 'path';
import { execSync } from 'child_process';
import { runCommandWithOutput } from '../agent_tools/run_command.js';
import { generateActionPlan, evaluateAndContinue, generateCorrectedPlan, generateNextAction, generateNextActionAfterParsingError } from '../utils/openai.js';
import { askConfirmation, askRecoveryAction, askAdvancedConfirmation, askInput, parseAutoApprovalOptions } from '../utils/prompt.js';
import { isConfigured, setupConfig, getActiveConfig } from '../utils/config.js';
import { readFile, writeFile, fileExists, createDirectory } from '../utils/file.js';
import { getMemoryManager, initializeDefaultMemory } from '../utils/memory.js';
import { readFileWithLines } from '../agent_tools/read_file.js';
import { continueUntilComplete } from '../agent_tools/continue_until_complete.js';
import { patchFileWithDiagnostics } from '../agent_tools/patch_file.js';
import { createFile as createFileWithTool } from '../agent_tools/create_file.js';
import { informUser, taskCompleted, giveTip, updateStatus } from '../agent_tools/inform_user.js';
import { chat, greet, apologize, askQuestion, encourage } from '../agent_tools/chat.js';

/**
 * Ex√©cuteur d'actions
 */
class ActionExecutor {
  constructor() {
    this.currentStep = 0;
    this.totalSteps = 0;
    this.fileMemory = {}; // M√©moire des fichiers lus
  }

  async executeAction(step) {
    // Pour les actions de d√©couverte, ne pas afficher d'√©tape
    if (step.action === 'list_directory' || step.action === 'read_file_lines') {
      try {
        switch (step.action) {
          case 'list_directory':
            return await this.listDirectory(step.params);
          case 'read_file_lines':
            return await readFileWithLines(step.params);
          default:
            throw new Error(`Action de d√©couverte non support√©e: ${step.action}`);
        }
      } catch (error) {
        console.log(chalk.red(`Erreur: ${error.message}`));
        throw error;
      }
    } 
    
    // Pour les actions d'ex√©cution
    this.currentStep++;
    
    console.log(chalk.blue(`üìã √âtape ${this.currentStep}/${this.totalSteps}: ${step.description}`));
    
    const spinner = ora({
      text: step.description,
      color: 'cyan'
    }).start();

    let actionResult = undefined; // <== AJOUT√â : stocker le r√©sultat renvoy√© par l'action
    try {
      switch (step.action) {
        case 'create_file':
          actionResult = await this.createFile(step.params);
          break;
        case 'modify_file':
          await this.modifyFile(step.params);
          actionResult = `‚úÖ Fichier modifi√©: ${path.resolve(step.params.path)}`;
          break;
        case 'patch_file':
          try {
            actionResult = await this.patchFile(step.params); // retourne d√©j√† un message d√©taill√©
          } catch (patchError) {
            // Log d√©taill√© des erreurs de patch pour aider au debug
            console.log(chalk.red(`\n‚ùå Erreur d√©taill√©e de patch_file:`));
            console.log(chalk.gray(`   üìÅ Fichier: ${step.params.path}`));
            console.log(chalk.gray(`   üîß Changements demand√©s: ${step.params.changes?.length || 0}`));
            if (step.params.changes && step.params.changes.length > 0) {
              step.params.changes.forEach((change, idx) => {
                console.log(chalk.gray(`      ${idx + 1}. ${change.action} ligne ${change.line}: "${change.old}" ‚Üí "${change.new}"`));
              });
            }
            console.log(chalk.gray(`   üí¨ Message d'erreur: ${patchError.message}`));
            throw patchError;
          }
          break;
        case 'run_command':
          actionResult = await this.runCommand(step.params);
          break;
        case 'create_directory':
          await this.createDir(step.params);
          actionResult = `‚úÖ Dossier cr√©√©: ${path.resolve(step.params.path)}`;
          break;
        case 'inform_user':
          actionResult = await informUser(step.params);
          break;
        case 'task_completed':
          actionResult = await taskCompleted(step.params);
          break;
        case 'give_tip':
          actionResult = await giveTip(step.params);
          break;
        case 'update_status':
          actionResult = await updateStatus(step.params);
          break;
        case 'chat':
          actionResult = await chat(step.params);
          break;
        case 'greet':
          actionResult = await greet(step.params);
          break;
        case 'apologize':
          actionResult = await apologize(step.params);
          break;
        case 'ask_question':
          actionResult = await askQuestion(step.params);
          break;
        case 'encourage':
          actionResult = await encourage(step.params);
          break;
        default:
          throw new Error(`Action non support√©e: ${step.action}`);
      }
      
      spinner.succeed(chalk.green(`‚úÖ ${step.description}`));
      return actionResult; // <== AJOUT√â : retourner le r√©sultat pour qu'il soit enregistr√©
    } catch (error) {
      spinner.fail(chalk.red(`‚ùå ${step.description}`));
      throw error;
    }
  }

  async createFile(params) {
    return await createFileWithTool(params);
  }

  async modifyFile(params) {
    if (!params.path) {
      throw new Error('Param√®tre manquant: path requis');
    }
    
    const absolutePath = path.resolve(params.path);
    if (!fileExists(absolutePath)) {
      throw new Error(`Fichier non trouv√©: ${absolutePath}`);
    }
    
    console.log(chalk.gray(`   ‚úèÔ∏è  Modification fichier: ${absolutePath}`));
    console.log(chalk.gray(`   üîÑ Chemin r√©solu: ${params.path} ‚Üí ${absolutePath}`));
    
    if (params.content) {
      writeFile(absolutePath, params.content);
    } else {
      throw new Error('Param√®tre manquant: content requis pour modifier un fichier');
    }
  }

  async patchFile(params) {
    return await patchFileWithDiagnostics(params);
  }

  async listDirectory(params) {
    const dirPath = params.path || '.';
    const absolutePath = path.resolve(dirPath);
    console.log(chalk.blue(`üìÅ Exploration du dossier: ${absolutePath}`));
    console.log(chalk.gray(`   üîÑ Chemin r√©solu: ${dirPath} ‚Üí ${absolutePath}`));
    
    try {
      const result = execSync(`ls -la "${absolutePath}"`, { 
        encoding: 'utf8',
        maxBuffer: 1024 * 1024 * 10 // 10MB buffer
      });
      
      console.log(chalk.gray('üìã Contenu du dossier:'));
      console.log(result);
    
      return result;
    } catch (error) {
      throw new Error(`Impossible de lister le dossier: ${error.message}`);
    }
  }



  async runCommand(params) {
    return await runCommandWithOutput(params);
  }

  async createDir(params) {
    if (!params.path) {
      throw new Error('Param√®tre manquant: path requis');
    }
    
    // Utiliser le chemin absolu du dossier √† cr√©er
    const absolutePath = path.resolve(params.path);
    console.log(chalk.gray(`   üìÅ Cr√©ation dossier: ${absolutePath}`));
    console.log(chalk.gray(`   üîÑ Chemin r√©solu: ${params.path} ‚Üí ${absolutePath}`));
    
    createDirectory(absolutePath);
  }
}

/**
 * Gestionnaire de r√©cup√©ration d'erreurs
 */
class ErrorRecoveryManager {
  constructor() {
    this.maxAttempts = 3;
    this.attemptCount = 0;
  }

  async handleError(error, currentPlan, completedSteps, options = {}) {
    this.attemptCount++;
    
    console.log(chalk.red(`\n‚ùå Erreur d√©tect√©e (tentative ${this.attemptCount}/${this.maxAttempts}):`));
    console.log(chalk.red(error.message));
    
    if (this.attemptCount >= this.maxAttempts) {
      console.log(chalk.red('\nüö´ Nombre maximum de tentatives atteint'));
      throw new Error(`√âchec apr√®s ${this.maxAttempts} tentatives: ${error.message}`);
    }
    
    // Analyse de l'erreur
    const errorContext = this.analyzeError(error);
    console.log(chalk.yellow(`\nüîç Type d'erreur d√©tect√©: ${errorContext.type}`));
    
    // Demander l'action de r√©cup√©ration √† l'utilisateur
    if (!options.auto) {
      const recoveryAction = await askRecoveryAction(error.message);
      
      if (recoveryAction === 'abort') {
        throw new Error('Arr√™t demand√© par l\'utilisateur');
      } else if (recoveryAction === 'skip') {
        console.log(chalk.yellow('‚è≠Ô∏è  √âtape ignor√©e, continuation...'));
        return { action: 'skip' };
      }
      // Si 'retry', on continue avec la g√©n√©ration d'un plan corrig√©
    }
    
    // G√©n√©rer un plan corrig√© avec l'IA
    console.log(chalk.blue('\nüîÑ G√©n√©ration d\'un plan corrig√© avec l\'IA...'));
    
    try {
      const correctedPlan = await generateCorrectedPlan(
        currentPlan,
        completedSteps,
        error.message,
        errorContext
      );
      
      return {
        action: 'retry',
        correctedPlan: correctedPlan
      };
    } catch (recoveryError) {
      console.log(chalk.red(`Erreur lors de la r√©cup√©ration: ${recoveryError.message}`));
      throw new Error(`Impossible de r√©cup√©rer: ${recoveryError.message}`);
    }
  }
  
  analyzeError(error) {
    const message = error.message.toLowerCase();
    
    if (message.includes('command not found') || message.includes('commande introuvable')) {
      return { type: 'commande_manquante', severity: 'high' };
    }
    
    if (message.includes('permission denied') || message.includes('access denied')) {
      return { type: 'permission', severity: 'medium' };
    }
    
    if (message.includes('no such file') || message.includes('fichier non trouv√©')) {
      return { type: 'fichier_manquant', severity: 'medium' };
    }
    
    if (message.includes('syntax error') || message.includes('syntaxe')) {
      return { type: 'syntaxe', severity: 'high' };
    }
    
    if (message.includes('network') || message.includes('connection')) {
      return { type: 'reseau', severity: 'low' };
    }
    
    return { type: 'inconnu', severity: 'medium' };
  }
  
  reset() {
    this.attemptCount = 0;
  }
}

/**
 * Affichage des actions avant ex√©cution
 */
function displayActionPlan(actions) {
  console.log(chalk.blue('\nüìã Plan d\'actions g√©n√©r√©:\n'));
  
  actions.forEach((step, index) => {
    let actionIcon = '‚öôÔ∏è';
    
    switch (step.action) {
      case 'create_file': actionIcon = 'üìù'; break;
        case 'modify_file': actionIcon = '‚úèÔ∏è'; break;
        case 'patch_file': actionIcon = 'üîß'; break;
      case 'run_command': actionIcon = 'üñ•Ô∏è'; break;
        case 'create_directory': actionIcon = 'üìÅ'; break;
      case 'list_directory': actionIcon = 'üìÇ'; break;
      case 'read_file_lines': actionIcon = 'üìñ'; break;
      }
      
    console.log(chalk.white(`${actionIcon} ${index + 1}. ${step.description}`));
      
    // Afficher les param√®tres importants
    switch (step.action) {
          case 'create_file':
          case 'modify_file':
      case 'read_file_lines':
        if (step.params.path) {
          console.log(chalk.gray(`   üìÅ Fichier: ${step.params.path}`));
            }
            break;
          case 'run_command':
        if (step.params.command) {
          console.log(chalk.gray(`   üíª Commande: ${step.params.command}`));
            }
            break;
          case 'create_directory':
        if (step.params.path) {
          console.log(chalk.gray(`   üìÅ Dossier: ${step.params.path}`));
            }
            break;
    }
  });
  
  console.log('');
}

/**
 * Gestion des prompts de confirmation avanc√©s
 */
async function handleAdvancedConfirmation(actions, options) {
  const autoApproval = parseAutoApprovalOptions(options.auto);
  
  if (autoApproval.isFullAuto) {
    console.log(chalk.green('üöÄ Mode automatique complet activ√©, ex√©cution directe...'));
    return 'execute';
  }
  
  // V√©rifier si toutes les actions du plan sont auto-approuv√©es
  if (options.auto && typeof options.auto === 'string') {
    const allActionsApproved = actions.every(action => autoApproval.shouldAutoApprove(action.action));
    if (allActionsApproved) {
      console.log(chalk.green('üöÄ Toutes les actions du plan sont auto-approuv√©es, ex√©cution directe...'));
      return 'execute';
    } else {
      console.log(chalk.yellow('‚ö†Ô∏è Certaines actions du plan ne sont pas auto-approuv√©es, confirmation requise'));
    }
  }
  
  const response = await askAdvancedConfirmation(`Voulez-vous ex√©cuter ce plan de ${actions.length} action(s) ?`);
  
  // askAdvancedConfirmation retourne soit true, soit un objet avec {confirmed: false, recovery}
  if (response === true || (response && response.confirmed === true)) {
    return 'execute';
  } else {
    return 'abort';
  }
}

/**
 * Fonction principale d'ex√©cution des actions
 */
async function executeActionPlan(actions, options = {}) {
    const executor = new ActionExecutor();
  const errorManager = new ErrorRecoveryManager();
  const memory = getMemoryManager();
  
  // Calculer le nombre d'√©tapes d'ex√©cution (exclure les d√©couvertes)
  const executionSteps = actions.filter(step => 
    step.action !== 'list_directory' && step.action !== 'read_file_lines'
  );
  executor.totalSteps = executionSteps.length;
  
  let completedSteps = [];
  let currentPlan = [...actions];
  
  console.log(chalk.blue(`\nüéØ D√©but de l'ex√©cution (${executor.totalSteps} √©tapes)`));
  
  for (let i = 0; i < currentPlan.length; i++) {
    const step = currentPlan[i];
    
    try {
      const result = await executor.executeAction(step);
      
      completedSteps.push({
        ...step,
        status: 'completed',
        result: result
      });
      
      // Pause entre les actions si pas en mode fast
      if (!options.fast && !options.auto) {
        await new Promise(resolve => setTimeout(resolve, 800));
      }
      
    } catch (error) {
      // Gestion de r√©cup√©ration d'erreur
      try {
        const recovery = await errorManager.handleError(
          error, 
          currentPlan, 
          completedSteps, 
          options
        );
        
        if (recovery.action === 'skip') {
          completedSteps.push({
            ...step,
            status: 'skipped',
            error: error.message
          });
          continue;
        } else if (recovery.action === 'retry' && recovery.correctedPlan) {
          console.log(chalk.blue('\nüîÑ Application du plan corrig√©...'));
          
          // Remplacer le plan actuel par le plan corrig√©
          currentPlan = recovery.correctedPlan;
          
          // R√©initialiser l'index pour red√©marrer depuis le d√©but du nouveau plan
          i = -1; // Sera incr√©ment√© √† 0 au prochain tour de boucle
          
          // Recalculer le nombre d'√©tapes
          const newExecutionSteps = currentPlan.filter(step => 
            step.action !== 'list_directory' && step.action !== 'read_file_lines'
          );
          executor.totalSteps = newExecutionSteps.length;
          executor.currentStep = 0;
          
          // R√©initialiser le compteur d'erreurs
          errorManager.reset();
          
          continue;
        }
      } catch (recoveryError) {
        // Si la r√©cup√©ration √©choue, arr√™ter compl√®tement
        console.log(chalk.red(`\nüí• √âchec de la r√©cup√©ration: ${recoveryError.message}`));
        
        // Sauvegarder l'√©tat d'√©chec en m√©moire
        memory.addEpisode('agent_failure', {
          task: options.originalTask || 'T√¢che inconnue',
          error: recoveryError.message,
          completedSteps: completedSteps.length,
          totalSteps: currentPlan.length
        });
        
        throw recoveryError;
      }
    }
  }
  
  // Sauvegarder le succ√®s en m√©moire
  memory.addEpisode('agent_success', {
    task: options.originalTask || 'T√¢che inconnue',
    completedSteps: completedSteps.length,
    totalSteps: currentPlan.length,
    executionTime: Date.now() - (options.startTime || Date.now())
  });
  
  console.log(chalk.green(`\n‚úÖ Toutes les actions ont √©t√© ex√©cut√©es avec succ√®s !`));
  console.log(chalk.gray(`üìä ${completedSteps.length} √©tape(s) termin√©e(s)`));
  
  return {
    success: true,
    completedSteps,
    totalSteps: currentPlan.length
  };
}



/**
 * Commande agent avec plan complet (ancienne approche)
 */
export async function agentCommandWithPlan(task, options = {}) {
  const startTime = Date.now();
  
  try {
    // V√©rifier la configuration
    if (!isConfigured()) {
      console.log(chalk.yellow('‚öôÔ∏è  Configuration requise...'));
      await setupConfig();
    }
    
    // Initialiser la m√©moire par d√©faut si n√©cessaire
    await initializeDefaultMemory();
    
    const memory = getMemoryManager();
    const config = getActiveConfig();
    
    console.log(chalk.blue('ü§ñ Tera Agent - Assistant IA pour l\'automatisation\n'));
    console.log(chalk.white('üìã T√¢che demand√©e:'), chalk.cyan(task));
    console.log(chalk.gray(`üîó Provider: ${config.provider} | Mod√®le: ${config.model}\n`));
    
            if (options.debug) {
      console.log(chalk.magenta('üêõ Mode debug activ√©\n'));
    }
    
    // G√©n√©rer le plan d'actions avec l'IA
    console.log(chalk.blue('ü§ñ G√©n√©ration du plan d\'actions avec l\'IA...'));
    
    const planResult = await generateActionPlan(task, {
      debug: options.debug,
      memory: memory.getContextForTask(task)
    });
    
    const actions = planResult.plan ? planResult.plan.actions : planResult.actions;
    
    if (!actions || !Array.isArray(actions) || actions.length === 0) {
      console.log(chalk.red('‚ùå Aucune action g√©n√©r√©e par l\'IA'));
      return;
    }
    
    // Afficher le plan g√©n√©r√©
    displayActionPlan(actions);
    
    // Demander confirmation avec options avanc√©es
    const confirmationResult = await handleAdvancedConfirmation(actions, options);
    
    if (confirmationResult === 'abort') {
      console.log(chalk.yellow('üö´ Ex√©cution annul√©e par l\'utilisateur'));
                return;
    }
    
    // Ex√©cuter le plan d'actions
    const executionResult = await executeActionPlan(actions, {
      ...options,
      originalTask: task,
      startTime
    });
    
    // √âvaluation et continuation r√©cursive (toujours, m√™me en mode fast)
    await continueUntilComplete(
          task, 
      executionResult.completedSteps, 
      options, 
      memory, 
      executeActionPlan,
      displayActionPlan,
      startTime
    );
    
    const duration = Math.round((Date.now() - startTime) / 1000);
    console.log(chalk.green(`\nüéâ T√¢che termin√©e avec succ√®s en ${duration}s !`));
        
      } catch (error) {
    console.log(chalk.red(`\nüí• Erreur: ${error.message}`));
    
    if (options.debug) {
      console.error(error);
    }
    
    process.exit(1);
  }
}

/**
 * Commande agent principale (approche it√©rative - une action √† la fois)
 */
export async function agentCommand(task, options = {}) {
  const startTime = Date.now();
  
  try {
    // V√©rifier la configuration
    if (!isConfigured()) {
      console.log(chalk.yellow('‚öôÔ∏è  Configuration requise...'));
      await setupConfig();
    }
    
    // Initialiser la m√©moire par d√©faut si n√©cessaire
    await initializeDefaultMemory();
    
    const memory = getMemoryManager();
    const config = getActiveConfig();
    
    console.log(chalk.blue('ü§ñ Tera Agent - Assistant IA pour l\'automatisation\n'));
    
    // Si aucune t√¢che n'est fournie, demander √† l'utilisateur
    if (!task || task.trim() === '') {
      console.log(chalk.blue('üí¨ Quelle t√¢che souhaitez-vous que je r√©alise ?'));
      task = await askInput(chalk.cyan('T√¢che √† accomplir:'));
      
      if (!task || task.trim() === '') {
        console.log(chalk.yellow('‚ùå Aucune t√¢che fournie. Au revoir !'));
        return;
      }
    }
    
    console.log(chalk.white('üìã T√¢che demand√©e:'), chalk.cyan(task));
    console.log(chalk.gray(`üîó Provider: ${config.provider} | Mod√®le: ${config.model}\n`));
    
    if (options.debug) {
      console.log(chalk.magenta('üêõ Mode debug activ√©\n'));
    }

    const executor = new ActionExecutor();
    const errorManager = new ErrorRecoveryManager();
    let completedActions = [];
    let stepNumber = 0;
    const maxSteps = Infinity; // Pas de limite

    console.log(chalk.blue('üéØ Ex√©cution it√©rative - g√©n√©ration d\'actions une par une\n'));

    // Parser les options d'auto-approbation
    const autoApproval = parseAutoApprovalOptions(options.auto);

    while (stepNumber < maxSteps) {
      stepNumber++;
      
      // G√©n√©rer la prochaine action
      console.log(chalk.blue(`üîÑ Planification de l'action suivante...`));
      
      let actionResult;
      let retryCount = 0;
      const maxRetries = 3;
      
      while (retryCount < maxRetries) {
        try {
          actionResult = await generateNextAction(task, completedActions, {
            debug: options.debug || (retryCount > 0), // Activer le debug apr√®s le premier √©chec
            memory: memory.getContextForTask(task)
          });
          break; // Succ√®s, sortir de la boucle de retry
        } catch (error) {
          retryCount++;
          if (error.message.includes('Erreur de parsing JSON')) {
            console.log(chalk.yellow(`‚ö†Ô∏è Erreur de parsing JSON (tentative ${retryCount}/${maxRetries})`));
            
            if (retryCount < maxRetries) {
              console.log(chalk.blue(`ü§ñ Envoi de l'erreur et des outils disponibles √† l'IA...`));
              
              try {
                // Utiliser la nouvelle fonction qui envoie seulement l'erreur et les outils
                actionResult = await generateNextActionAfterParsingError(task, completedActions, error.message, {
                  debug: options.debug || true
                });
                console.log(chalk.green(`‚úÖ JSON corrig√© avec succ√®s !`));
                break; // Succ√®s avec la correction
              } catch (correctionError) {
                console.log(chalk.red(`‚ùå √âchec de la correction automatique: ${correctionError.message}`));
                // Si la correction √©choue aussi, continuer avec le retry normal
                if (retryCount < maxRetries) {
                  await new Promise(resolve => setTimeout(resolve, 1000)); // Pause de 1s
                  continue;
                }
              }
            }
          }
          // Si ce n'est pas une erreur de parsing JSON ou si on a atteint le max de retries, relancer l'erreur
          if (retryCount >= maxRetries) {
            throw error;
          }
        }
      }

      if (actionResult.status === 'completed') {
        console.log(chalk.green('\nüéâ T√¢che termin√©e avec succ√®s !'));
        
        // Afficher un r√©sum√© des actions accomplies
        const completedCount = completedActions.filter(a => a.status === 'completed').length;
        const failedCount = completedActions.filter(a => a.status === 'failed').length;
        
        console.log(chalk.blue('\nüìä R√©sum√© de l\'ex√©cution:'));
        console.log(chalk.green(`   ‚úÖ ${completedCount} actions r√©ussies`));
        if (failedCount > 0) {
          console.log(chalk.red(`   ‚ùå ${failedCount} actions corrig√©es`));
        }
        console.log(chalk.gray(`   üîÑ Total: ${stepNumber} √©tapes`));
        
        // Demander une nouvelle t√¢che √† l'utilisateur
        console.log(chalk.blue('\nüí¨ Que souhaitez-vous faire maintenant ?'));
        const newTask = await askInput(chalk.cyan('Nouvelle t√¢che (ou tapez "quit" pour quitter):'));
        
        if (newTask.toLowerCase() === 'quit' || newTask.toLowerCase() === 'exit' || newTask.trim() === '') {
          console.log(chalk.yellow('üëã Au revoir !'));
          break;
        }
        
        // Red√©marrer avec la nouvelle t√¢che
        task = newTask;
        console.log(chalk.blue(`\nüéØ Nouvelle t√¢che: ${chalk.cyan(task)}`));
        console.log(chalk.blue('üéØ Reprise de l\'ex√©cution it√©rative...\n'));
        
        // R√©initialiser partiellement mais garder l'historique pour le contexte
        stepNumber = 0; // Red√©marrer le compteur d'√©tapes
        // Note: on garde completedActions pour que l'IA ait le contexte des actions pr√©c√©dentes
        
        continue;
      }

      const action = actionResult.next_action;
      if (!action) {
        console.log(chalk.red('‚ùå Aucune action g√©n√©r√©e'));
        break;
      }

      // Afficher l'action
      let actionIcon = '‚öôÔ∏è';
      switch (action.action) {
        case 'create_file': actionIcon = 'üìù'; break;
        case 'modify_file': actionIcon = '‚úèÔ∏è'; break;
        case 'patch_file': actionIcon = 'üîß'; break;
        case 'run_command': actionIcon = 'üñ•Ô∏è'; break;
        case 'create_directory': actionIcon = 'üìÅ'; break;
        case 'list_directory': actionIcon = 'üìÇ'; break;
        case 'read_file_lines': actionIcon = 'üìñ'; break;
      }

      console.log(chalk.white(`\n${actionIcon} Prochaine action: ${action.description}`));
      
      // Afficher les param√®tres importants
      switch (action.action) {
        case 'create_file':
        case 'modify_file':
        case 'read_file_lines':
        case 'patch_file':
          if (action.params.path) {
            console.log(chalk.gray(`   üìÅ Fichier: ${action.params.path}`));
          }
          break;
        case 'run_command':
          if (action.params.command) {
            console.log(chalk.gray(`   üíª Commande: ${action.params.command}`));
          }
          break;
        case 'create_directory':
          if (action.params.path) {
            console.log(chalk.gray(`   üìÅ Dossier: ${action.params.path}`));
          }
          break;
      }

      // Demander confirmation selon les options d'auto-approbation
      const shouldSkipConfirmation = autoApproval.isFullAuto || 
                                   autoApproval.shouldAutoApprove(action.action) || 
                                   options.fast;
      
      if (!shouldSkipConfirmation) {
        const proceed = await askConfirmation('\nEx√©cuter cette action ?');
        if (!proceed) {
          console.log(chalk.yellow('üö´ Ex√©cution annul√©e par l\'utilisateur'));
          return;
        }
      } else if (autoApproval.shouldAutoApprove(action.action) && !autoApproval.isFullAuto) {
        console.log(chalk.green(`‚úÖ Action ${action.action} auto-approuv√©e`));
      }

      try {
        // Ex√©cuter l'action
        const result = await executor.executeAction(action);
        
        completedActions.push({
          ...action,
          status: 'completed',
          result: result
        });

        // Pause entre les actions si pas en mode fast
        if (!options.fast && !options.auto) {
          await new Promise(resolve => setTimeout(resolve, 800));
        }

      } catch (error) {
        // Dans l'approche it√©rative, transmettre l'erreur √† l'IA pour qu'elle d√©cide de la prochaine action
        console.log(chalk.red(`‚ùå Erreur d√©tect√©e: ${error.message}`));
        console.log(chalk.blue('ü§ñ Transmission de l\'erreur √† l\'IA pour correction automatique...'));
        
        // Enregistrer l'erreur dans les actions compl√©t√©es pour que l'IA la voie
        completedActions.push({
          ...action,
          status: 'failed',
          error: error.message,
          result: `‚ùå ERREUR: ${error.message}`
        });

        // Continuer √† la prochaine it√©ration - l'IA verra l'erreur et g√©n√©rera une action de correction
        // Pause courte pour la lisibilit√©
        if (!options.fast) {
          await new Promise(resolve => setTimeout(resolve, 500));
        }
      }
    }

    if (stepNumber >= maxSteps) {
      console.log(chalk.yellow(`\n‚ö†Ô∏è  Limite maximale d'actions atteinte`));
    }
    
    // Sauvegarder le succ√®s en m√©moire
    memory.addEpisode('agent_success', {
      task,
      actions: completedActions,
      duration: Date.now() - startTime
    });
    
  } catch (error) {
    console.log(chalk.red(`\nüí• Erreur fatale: ${error.message}`));
    
    // Sauvegarder l'√©chec en m√©moire
    const memory = getMemoryManager();
    memory.addEpisode('agent_failure', {
      task,
      error: error.message,
      duration: Date.now() - startTime
    });
    
    process.exit(1);
  }
} 